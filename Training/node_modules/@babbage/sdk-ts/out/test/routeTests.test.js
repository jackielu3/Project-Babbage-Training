"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-env jest */
const index_1 = __importDefault(require("../src/index"));
// Tests makeHttpRequest.js is handling basic errors correctly for every route
jest.setTimeout(90000);
describe('babbage-sdk-routes', () => {
    beforeEach(() => {
    });
    afterEach(() => {
        jest.clearAllMocks();
    });
    it('Throws an error when trying to make a bad request to verifyHmac', async () => {
        const hmacResults = await index_1.default.createHmac({
            data: Buffer.from('some data'),
            protocolID: 'Hello World',
            keyID: '1'
        });
        const result = await index_1.default.verifyHmac({
            data: Buffer.from('some data that was not used'),
            hmac: Buffer.from(hmacResults).toString('base64'),
            protocolID: 'Hello World',
            keyID: '1'
        });
        expect(result).toEqual(false);
    });
    it('Throws an error when trying to make a bad request to verifySignature', async () => {
        const signature = await index_1.default.createSignature({
            data: 'This should fail, corrrect?', // Note: Also works as a base64 string
            protocolID: 'Hello World',
            keyID: '1'
        });
        const result = await index_1.default.verifySignature({
            data: Buffer.from('some data'),
            signature: Buffer.from(signature).toString('base64'),
            protocolID: 'Hello World',
            keyID: '1'
        });
        expect(result).toEqual(false);
    });
});
//# sourceMappingURL=routeTests.test.js.map