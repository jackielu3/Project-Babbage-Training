import { MerklePath, Transaction } from "@bsv/sdk";
import { EnvelopeEvidenceApi, OptionalEnvelopeEvidenceApi, TscMerkleProofApi } from "../types";
/**
 * BEEF standard: BRC-62: Background Evaluation Extended Format (BEEF) Transactions
 * https://github.com/bitcoin-sv/BRCs/blob/master/transactions/0062.md
 *
 * BUMP standard: BRC-74: BSV Unified Merkle Path (BUMP) Format
 * https://github.com/bitcoin-sv/BRCs/blob/master/transactions/0074.md
 */
/**
 * @param input Either a `Transaction` with sourceTransaction and merklePath,
 * recursively, on inputs,
 * or a serialized BEEF of the transaction.
 * @returns Everett-style Envelope for the transaction.
 */
export declare function toEnvelopeFromBEEF(input: Transaction | number[]): EnvelopeEvidenceApi;
/**
 * Converts a BRC-8 Everett-style Transaction Envelope
 * to a @bsv/sdk-ts Transaction
 * with corresponding merklePath and sourceTransaction properties.
 *
 * Uses tx.toBEEF() to generate binary BEEF data.
 *
 * @param e
 * @returns tx: Transaction containing required merklePath and sourceTransaction values
 * @returns beef: tx.toBEEF()
 */
export declare function toBEEFfromEnvelope(e: EnvelopeEvidenceApi): {
    tx: Transaction;
    beef: number[];
};
/**
 * Convert a MerklePath to a single BRC-10 proof
 * @param txid the txid in `mp` for which a BRC-10 proof is needed
 * @param mp MerklePath
 * @returns transaction proof in BRC-10 string format.
 */
export declare function convertMerklePathToProof(txid: string, mp: MerklePath): TscMerkleProofApi;
/**
 * Convert a single BRC-10 proof to a MerklePath
 * @param txid transaction hash as big endian hex string
 * @param proof transaction proof in BRC-10 string format.
 * @returns corresponding MerklePath
 */
export declare function convertProofToMerklePath(txid: string, proof: TscMerkleProofApi): MerklePath;
export declare function verifyTruthy<T>(v: T | null | undefined, description?: string): T;
/**
 * Convert OptionalEnvelopeEvidenceApi to EnvelopeEvidenceApi.
 *
 * Missing data (rawTx / proofs) can be looked up if lookupMissing is provided.
 *
 * Any mising data will result in an Error throw.
 *
 * @param e
 * @param lookupMissing
 */
export declare function resolveOptionalEnvelopeEvidence(e: OptionalEnvelopeEvidenceApi, lookupMissing?: (txid: string) => Promise<{
    rawTx?: string;
    proof?: TscMerkleProofApi;
}>): Promise<EnvelopeEvidenceApi>;
export declare function validateOptionalEnvelopeEvidence(e: OptionalEnvelopeEvidenceApi): EnvelopeEvidenceApi;
//# sourceMappingURL=toBEEF.d.ts.map