"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const isomorphic_fetch_1 = __importDefault(require("isomorphic-fetch"));
const stream_json_1 = require("stream-json");
const StreamValues_1 = require("stream-json/streamers/StreamValues");
const fetch = typeof window !== 'object'
    ? isomorphic_fetch_1.default
    : window.fetch;
async function makeHttpRequest(routeURL, requestInput = {}) {
    // If we're in a node environment, we need to inject the Orign header
    if (typeof window !== 'object') {
        requestInput.headers = {
            ...requestInput.headers,
            Origin: 'http://localhost'
        };
    }
    const response = await fetch(routeURL, requestInput);
    // Determine the request success and response content type
    if (response.headers.get('content-type') === 'application/octet-stream') {
        return await response.arrayBuffer();
    }
    let parsedJSON = [];
    if (typeof window !== 'object') {
        const jsonParser = (0, stream_json_1.parser)();
        const resultStream = response.body.pipe(jsonParser).pipe((0, StreamValues_1.streamValues)());
        const dataPromise = new Promise((resolve, reject) => {
            resultStream.on('data', ({ value }) => {
                parsedJSON.push(value);
            });
            resultStream.on('end', () => {
                resolve(parsedJSON);
            });
            resultStream.on('error', (err) => {
                reject(err);
            });
        });
        await dataPromise; // Wait until the stream is finished
        // Assuming the JSON is an array, directly return the results array
        // If it's expected to be a single object, you might need to aggregate differently
        if (parsedJSON.length === 1 && !Array.isArray(parsedJSON[0])) {
            parsedJSON = parsedJSON[0]; // Single object case
        }
        parsedJSON = parsedJSON; // Array or complex object case
    }
    else {
        // Browser environment: use the ReadableStream interface
        const reader = response.body.getReader();
        let results = '';
        let read;
        do {
            read = await reader.read();
            if (!read.done) {
                results += new TextDecoder('utf-8').decode(read.value, { stream: true });
            }
        } while (!read.done);
        reader.releaseLock();
        parsedJSON = JSON.parse(results);
    }
    if (parsedJSON.status === 'error') {
        const e = new Error(parsedJSON.description);
        e["code"] = parsedJSON["code"] || 'ERR_BAD_REQUEST';
        Object.keys(parsedJSON).forEach(key => {
            if (key !== 'description' && key !== 'code' && key !== 'status') {
                e[key] = parsedJSON[key];
            }
        });
        throw e;
    }
    return parsedJSON.result;
}
exports.default = makeHttpRequest;
//# sourceMappingURL=makeHttpRequest.js.map